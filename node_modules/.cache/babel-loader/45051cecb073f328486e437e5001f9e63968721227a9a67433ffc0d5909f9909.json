{"ast":null,"code":"var _jsxFileName = \"/Users/zenkri/HorizonHub/src/components/Details.jsx\";\nimport React from 'react';\nimport { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport { round } from '../makeitwork/weather';\nimport { UilTemperature, UilTear, UilWind, UilSun, UilSunset, UilArrowUp, UilArrowDown } from \"@iconscout/react-unicons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Details({\n  h,\n  currentFormattedData\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-stat mt-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-medium uppercase\",\n        children: h\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"my-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center justify-start text-white details-scroll-container overflow-x-auto relative\",\n      children: [currentFormattedData.forecast.forecastday[0].hour.map((weatherItem, index) => {\n        const currentTime = new Date().getTime() / 1000;\n        const hourTime = new Date(weatherItem.time).getTime() / 1000;\n        // Only render future hours\n        if (hourTime > currentTime) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center justify-center mx-2 \",\n            style: {\n              backgroundColor: 'rgb(187, 191, 188, 0.2)',\n              borderRadius: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-light text-sm\",\n              children: new Date(weatherItem.time).toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: weatherItem.condition.icon,\n              className: \"my-3 mx-9\",\n              type: \"image/png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium flex flex-row\",\n              children: [round(weatherItem.temp_c), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      }), currentFormattedData.forecast.forecastday[1].hour.map((weatherItem, index) => {\n        const currentTime = new Date().getTime() / 1000 + 86400;\n        const hourTime = new Date(weatherItem.time).getTime() / 1000;\n        // Only render till same hour tomorrow\n        if (hourTime < currentTime) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center justify-center mx-3\",\n            style: {\n              backgroundColor: 'rgb(187, 191, 188, 0.2)',\n              borderRadius: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-light text-sm\",\n              children: new Date(weatherItem.time).toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: weatherItem.condition.icon,\n              className: \"my-3 mx-9\",\n              type: \"image/png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium flex flex-row\",\n              children: [round(weatherItem.temp_c), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","Icon","useState","useEffect","round","UilTemperature","UilTear","UilWind","UilSun","UilSunset","UilArrowUp","UilArrowDown","jsxDEV","_jsxDEV","Details","h","currentFormattedData","children","className","fileName","_jsxFileName","lineNumber","columnNumber","forecast","forecastday","hour","map","weatherItem","index","currentTime","Date","getTime","hourTime","time","style","backgroundColor","borderRadius","toLocaleTimeString","minute","src","condition","icon","type","temp_c","_c","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/components/Details.jsx"],"sourcesContent":["import React from 'react'\nimport { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport { round  } from '../makeitwork/weather'; \nimport {\n  UilTemperature,\n  UilTear,\n  UilWind,\n  UilSun,\n  UilSunset,\n  UilArrowUp,\n  UilArrowDown,\n} from \"@iconscout/react-unicons\";\nfunction Details({h, currentFormattedData }) {\n  return (\n    <div>\n      <div className=\"flex items-center justify-stat mt-6\">\n        <p className=\"text-white font-medium uppercase\">{h}</p>\n      </div>\n      <hr className=\"my-2\"></hr>\n      <div className=\"flex flex-row items-center justify-start text-white details-scroll-container overflow-x-auto relative\">\n        {currentFormattedData.forecast.forecastday[0].hour.map((weatherItem, index) => {\n          const currentTime = new Date().getTime() / 1000;\n          const hourTime = new Date(weatherItem.time).getTime() / 1000;        \n          // Only render future hours\n          if (hourTime > currentTime) {\n            return (\n              <div\n                key={index}\n                className=\"flex flex-col items-center justify-center mx-2 \"\n                style={{ backgroundColor: 'rgb(187, 191, 188, 0.2)', borderRadius: '8px' }}\n              >\n                <p className=\"font-light text-sm\">\n                  {new Date(weatherItem.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </p>\n          \n                <img src={weatherItem.condition.icon} className=\"my-3 mx-9\" type=\"image/png\" />\n               \n                <p className=\"font-medium flex flex-row\">\n                  {round(weatherItem.temp_c)}°\n                </p>\n              </div>\n            );\n          }\n          return null;\n        })}\n        {currentFormattedData.forecast.forecastday[1].hour.map((weatherItem, index) => {\n          const currentTime = new Date().getTime() / 1000 + 86400;\n          const hourTime = new Date(weatherItem.time).getTime() / 1000;\n          // Only render till same hour tomorrow\n          if (hourTime < currentTime) {\n            return (\n              <div\n                key={index}\n                className=\"flex flex-col items-center justify-center mx-3\"\n                style={{ backgroundColor: 'rgb(187, 191, 188, 0.2)', borderRadius: '8px' }}\n              >\n                <p className=\"font-light text-sm\">\n                  {new Date(weatherItem.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </p>\n          \n                <img src={weatherItem.condition.icon} className=\"my-3 mx-9\" type=\"image/png\" />\n               \n                <p className=\"font-medium flex flex-row\">\n                  {round(weatherItem.temp_c)}°\n                </p>\n              </div>\n            );\n          }\n  \n          return null; \n        })}\n      </div>\n    </div>\n  );\n}  \nexport default Details;\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}