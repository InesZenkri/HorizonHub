{"ast":null,"code":"var _jsxFileName = \"/Users/zenkri/HorizonHub/src/components/Details.jsx\";\nimport React from 'react';\nimport { Icon } from '@iconify/react';\nimport { useState, useEffect } from 'react';\nimport { round } from '../makeitwork/weather';\nimport { DateTime } from 'luxon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Details({\n  h,\n  currentFormattedData\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-stat mt-6\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white font-medium uppercase\",\n        children: h\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"my-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row items-center justify-start text-white details-scroll-container overflow-x-auto relative\",\n      children: currentFormattedData.forecast.forecastday[0].hour.map((weatherItem, index) => {\n        const currentTime = DateTime.local();\n        const hourTime = DateTime.fromISO(weatherItem.time);\n\n        // Calculate the time for the same hour tomorrow\n        const tomorrowSameHour = currentTime.plus({\n          days: 1\n        }).startOf('day').plus({\n          hours: currentTime.hour\n        });\n\n        // Only render hours from the next hour until the same hour tomorrow\n        if (hourTime > currentTime && hourTime <= tomorrowSameHour) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center justify-center mx-4\",\n            style: {\n              backgroundColor: 'rgb(216, 216, 216, 0.2)',\n              borderRadius: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-light text-sm\",\n              children: hourTime.toLocaleString(DateTime.TIME_SIMPLE)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              icon: `meteocons:${weatherItem.condition.icon}-fill`,\n              width: \"45\",\n              className: \"my-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium\",\n              children: [round(weatherItem.temp_c), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this);\n        }\n        return null; // Skip rendering for other hours\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","Icon","useState","useEffect","round","DateTime","jsxDEV","_jsxDEV","Details","h","currentFormattedData","children","className","fileName","_jsxFileName","lineNumber","columnNumber","forecast","forecastday","hour","map","weatherItem","index","currentTime","local","hourTime","fromISO","time","tomorrowSameHour","plus","days","startOf","hours","style","backgroundColor","borderRadius","toLocaleString","TIME_SIMPLE","icon","condition","width","temp_c","_c","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/components/Details.jsx"],"sourcesContent":["import React from 'react'\nimport { Icon } from '@iconify/react';\n\nimport { useState, useEffect } from 'react';\nimport { round  } from '../makeitwork/weather'; \nimport { DateTime } from 'luxon';\n\nfunction Details({h, currentFormattedData}) {\n  return (\n    <div>\n      <div className=\"flex items-center justify-stat mt-6\">\n        <p className=\"text-white font-medium uppercase\">{h}</p>\n      </div>\n      <hr className=\"my-2\"></hr>\n      <div className=\"flex flex-row items-center justify-start text-white details-scroll-container overflow-x-auto relative\">\n        {currentFormattedData.forecast.forecastday[0].hour.map((weatherItem, index) => {\n          const currentTime = DateTime.local();\n          const hourTime = DateTime.fromISO(weatherItem.time);\n  \n          // Calculate the time for the same hour tomorrow\n          const tomorrowSameHour = currentTime.plus({ days: 1 }).startOf('day').plus({ hours: currentTime.hour });\n  \n          // Only render hours from the next hour until the same hour tomorrow\n          if (hourTime > currentTime && hourTime <= tomorrowSameHour) {\n            return (\n              <div\n                key={index}\n                className=\"flex flex-col items-center justify-center mx-4\"\n                style={{ backgroundColor: 'rgb(216, 216, 216, 0.2)', borderRadius: '8px' }}\n              >\n                <p className=\"font-light text-sm\">\n                  {hourTime.toLocaleString(DateTime.TIME_SIMPLE)}\n                </p>\n                <Icon icon={`meteocons:${weatherItem.condition.icon}-fill`} width=\"45\" className=\"my-1\" />\n                <p className=\"font-medium\">{round(weatherItem.temp_c)}Â°</p>\n              </div>\n            );\n          }\n  \n          return null; // Skip rendering for other hours\n        })}\n      </div>\n    </div>\n  );\n}  \n    export default Details;\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}