{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst IconURL = iconId => `http://openweathermap.org/img/wn/${iconId}@2x.png`;\n_c = IconURL;\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  const {\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    coord: {\n      lat,\n      lon\n    },\n    wind: {\n      speed\n    },\n    timezone,\n    weather,\n    name,\n    dt\n  } = data;\n  const {\n    description,\n    icon\n  } = weather[0];\n  return {\n    description,\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    iconurl: IconURL(icon),\n    speed,\n    timezone\n  };\n};\nconst getFormattedData = async searchParams => {\n  const {\n    q\n  } = searchParams;\n  const isCoordinates = q && q.match(/^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$/);\n  try {\n    let data;\n    if (isCoordinates) {\n      // Handle coordinates differently, perhaps make a separate API call\n      data = await getData(\"weather\", {\n        ...searchParams,\n        q: undefined\n      });\n    } else {\n      data = await getData(\"weather\", searchParams);\n    }\n    const currentFormattedData = formatCurrentData(data);\n    console.log(currentFormattedData);\n    return {\n      currentFormattedData\n    };\n  } catch (error) {\n    console.error(\"Error fetching weather data:\", error.message);\n    throw error; // Propagate the error to the calling function\n  }\n};\nconst formatTLT = (secs, zone, format = \"hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n  const dt = DateTime.fromSeconds(secs).plus({\n    seconds: timezone\n  });\n  const formattedDate = dt.toFormat(format);\n  return formattedDate;\n};\n_c2 = CustomDate;\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round };\nvar _c, _c2;\n$RefreshReg$(_c, \"IconURL\");\n$RefreshReg$(_c2, \"CustomDate\");","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","IconURL","iconId","_c","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentData","data","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","timezone","weather","name","dt","description","icon","iconurl","getFormattedData","q","isCoordinates","match","undefined","currentFormattedData","console","log","error","message","formatTLT","secs","zone","format","fromSeconds","setZone","toFormat","CustomDate","plus","seconds","formattedDate","_c2","round","number","toFixed","$RefreshReg$"],"sources":["/Users/zenkri/react-weather-app/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY =\"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\nconst IconURL = (iconId) => `http://openweathermap.org/img/wn/${iconId}@2x.png`;\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url).then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    const{ \n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        sys:{ country, sunrise, sunset},\n        coord: {lat, lon},\n        wind:{speed},\n        timezone,\n        weather,\n        name,\n        dt,    \n    } = data ;\n\n    const { description, icon } = weather[0];\n    return {\n        description,\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        iconurl : IconURL(icon),\n        speed,\n        timezone,\n    };\n};\n\n\nconst getFormattedData = async (searchParams) => { \n    const { q } = searchParams;\n    const isCoordinates = q && q.match(/^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$/);\n    try {\n        let data;\n        if (isCoordinates) {\n            // Handle coordinates differently, perhaps make a separate API call\n            data = await getData(\"weather\", { ...searchParams, q: undefined });\n        } else {\n            data = await getData(\"weather\", searchParams);\n        }\n\n        const currentFormattedData = formatCurrentData(data);\n        console.log(currentFormattedData);\n        return { currentFormattedData };\n    } catch (error) {\n        console.error(\"Error fetching weather data:\", error.message);\n        throw error; // Propagate the error to the calling function\n    }\n};\n\nconst formatTLT = (\n    secs,\n    zone,\n    format = \"hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const dt = DateTime.fromSeconds(secs).plus({ seconds: timezone });\n    const formattedDate = dt.toFormat(format);\n    return formattedDate;\n};\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n  };\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}