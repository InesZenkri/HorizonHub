{"ast":null,"code":"import { hasLocaleWeekInfo, hasRelative, padStart, roundTo, validateWeekSettings } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const {\n    base,\n    ...cacheKeyOpts\n  } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\nlet weekInfoCache = {};\nfunction getCachedWeekInfo(locString) {\n  let data = weekInfoCache[locString];\n  if (!data) {\n    const locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    weekInfoCache[locString] = data;\n  }\n  return data;\n}\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  const xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    let selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      const smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n    const {\n      numberingSystem,\n      calendar\n    } = options;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\nfunction listStuff(loc, length, englishFn, intlFn) {\n  const mode = loc.listingMode();\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n    const {\n      padTo,\n      floor,\n      ...otherOpts\n    } = opts;\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = {\n        useGrouping: false,\n        ...opts\n      };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n    let z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({\n          minutes: dt.offset\n        });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({\n        minutes: dt.offset\n      });\n      this.originalZone = dt.zone;\n    }\n    const intlOpts = {\n      ...this.opts\n    };\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n  format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts().map(({\n        value\n      }) => value).join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  }\n  formatToParts() {\n    const parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map(part => {\n        if (part.type === \"timeZoneName\") {\n          const offsetName = this.originalZone.offsetName(this.dt.ts, {\n            locale: this.dt.locale,\n            format: this.opts.timeZoneName\n          });\n          return {\n            ...part,\n            value: offsetName\n          };\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  }\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = {\n      style: \"long\",\n      ...opts\n    };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\nconst fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7]\n};\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);\n  }\n  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  }\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n  static fromObject({\n    locale,\n    numberingSystem,\n    outputCalendar,\n    weekSettings\n  } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  }\n  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n    return this.fastNumbersCached;\n  }\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, validateWeekSettings(alts.weekSettings) || this.weekSettings, alts.defaultToEN || false);\n    }\n  }\n  redefaultToEN(alts = {}) {\n    return this.clone({\n      ...alts,\n      defaultToEN: true\n    });\n  }\n  redefaultToSystem(alts = {}) {\n    return this.clone({\n      ...alts,\n      defaultToEN: false\n    });\n  }\n  months(length, format = false) {\n    return listStuff(this, length, English.months, () => {\n      const intl = format ? {\n          month: length,\n          day: \"numeric\"\n        } : {\n          month: length\n        },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n  weekdays(length, format = false) {\n    return listStuff(this, length, English.weekdays, () => {\n      const intl = format ? {\n          weekday: length,\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\"\n        } : {\n          weekday: length\n        },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt => this.extract(dt, intl, \"weekday\"));\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n  meridiems() {\n    return listStuff(this, undefined, () => English.meridiems, () => {\n      // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n      // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n      if (!this.meridiemCache) {\n        const intl = {\n          hour: \"numeric\",\n          hourCycle: \"h12\"\n        };\n        this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(dt => this.extract(dt, intl, \"dayperiod\"));\n      }\n      return this.meridiemCache;\n    });\n  }\n  eras(length) {\n    return listStuff(this, length, English.eras, () => {\n      const intl = {\n        era: length\n      };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt => this.extract(dt, intl, \"era\"));\n      }\n      return this.eraCache[length];\n    });\n  }\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n  isEnglish() {\n    return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n  }\n  getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  }\n  getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  }\n  getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  }\n  getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  }\n  equals(other) {\n    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n  }\n}","map":{"version":3,"names":["hasLocaleWeekInfo","hasRelative","padStart","roundTo","validateWeekSettings","English","Settings","DateTime","IANAZone","intlLFCache","getCachedLF","locString","opts","key","JSON","stringify","dtf","Intl","ListFormat","intlDTCache","getCachedDTF","DateTimeFormat","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","base","cacheKeyOpts","RelativeTimeFormat","sysLocaleCache","systemLocale","resolvedOptions","locale","weekInfoCache","getCachedWeekInfo","data","Locale","getWeekInfo","weekInfo","parseLocaleString","localeStr","xIndex","indexOf","substring","uIndex","options","selectedStr","e","smaller","numberingSystem","calendar","intlConfigString","outputCalendar","includes","mapMonths","f","ms","i","dt","utc","push","mapWeekdays","listStuff","loc","length","englishFn","intlFn","mode","listingMode","supportsFastNumbers","startsWith","intl","PolyNumberFormatter","constructor","forceSimple","padTo","floor","otherOpts","Object","keys","intlOpts","useGrouping","minimumIntegerDigits","format","fixed","Math","PolyDateFormatter","originalZone","undefined","z","timeZone","zone","type","gmtOffset","offset","offsetZ","create","valid","setZone","plus","minutes","name","formatToParts","map","value","join","toJSDate","parts","part","offsetName","ts","timeZoneName","PolyRelFormatter","isEnglish","style","rtf","count","unit","formatRelativeTime","numeric","fallbackWeekSettings","firstDay","minimalDays","weekend","fromOpts","weekSettings","defaultToEN","specifiedLocale","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","weekSettingsR","defaultWeekSettings","resetCache","fromObject","numbering","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","fastNumbers","isActuallyEn","hasNoWeirdness","clone","alts","getOwnPropertyNames","redefaultToEN","redefaultToSystem","months","month","day","formatStr","extract","weekdays","weekday","year","meridiems","hour","hourCycle","eras","era","field","df","dtFormatter","results","matching","find","m","toLowerCase","numberFormatter","relFormatter","listFormatter","getWeekSettings","getStartOfWeek","getMinDaysInFirstWeek","getWeekendDays","equals","other"],"sources":["/Users/zenkri/HorizonHub/node_modules/luxon/src/impl/locale.js"],"sourcesContent":["import { hasLocaleWeekInfo, hasRelative, padStart, roundTo, validateWeekSettings } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n// todo - remap caching\n\nlet intlLFCache = {};\nfunction getCachedLF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlLFCache[key];\n  if (!dtf) {\n    dtf = new Intl.ListFormat(locString, opts);\n    intlLFCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  }\n}\n\nlet weekInfoCache = {};\nfunction getCachedWeekInfo(locString) {\n  let data = weekInfoCache[locString];\n  if (!data) {\n    const locale = new Intl.Locale(locString);\n    // browsers currently implement this as a property, but spec says it should be a getter function\n    data = \"getWeekInfo\" in locale ? locale.getWeekInfo() : locale.weekInfo;\n    weekInfoCache[locString] = data;\n  }\n  return data;\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  // private subtags and unicode subtags have ordering requirements,\n  // and we're not properly parsing this, so just strip out the\n  // private ones if they exist.\n  const xIndex = localeStr.indexOf(\"-x-\");\n  if (xIndex !== -1) {\n    localeStr = localeStr.substring(0, xIndex);\n  }\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    let selectedStr;\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n      selectedStr = localeStr;\n    } catch (e) {\n      const smaller = localeStr.substring(0, uIndex);\n      options = getCachedDTF(smaller).resolvedOptions();\n      selectedStr = smaller;\n    }\n\n    const { numberingSystem, calendar } = options;\n    return [selectedStr, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (outputCalendar || numberingSystem) {\n    if (!localeStr.includes(\"-u-\")) {\n      localeStr += \"-u\";\n    }\n\n    if (outputCalendar) {\n      localeStr += `-ca-${outputCalendar}`;\n    }\n\n    if (numberingSystem) {\n      localeStr += `-nu-${numberingSystem}`;\n    }\n    return localeStr;\n  } else {\n    return localeStr;\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2009, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, englishFn, intlFn) {\n  const mode = loc.listingMode();\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\"\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    const { padTo, floor, ...otherOpts } = opts;\n\n    if (!forceSimple || Object.keys(otherOpts).length > 0) {\n      const intlOpts = { useGrouping: false, ...opts };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.originalZone = undefined;\n\n    let z = undefined;\n    if (this.opts.timeZone) {\n      // Don't apply any workarounds if a timeZone is explicitly provided in opts\n      this.dt = dt;\n    } else if (dt.zone.type === \"fixed\") {\n      // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.\n      // That is why fixed-offset TZ is set to that unless it is:\n      // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.\n      // 2. Unsupported by the browser:\n      //    - some do not support Etc/\n      //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata\n      const gmtOffset = -1 * (dt.offset / 60);\n      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;\n      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {\n        z = offsetZ;\n        this.dt = dt;\n      } else {\n        // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so\n        // we manually apply the offset and substitute the zone as needed.\n        z = \"UTC\";\n        this.dt = dt.offset === 0 ? dt : dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n        this.originalZone = dt.zone;\n      }\n    } else if (dt.zone.type === \"system\") {\n      this.dt = dt;\n    } else if (dt.zone.type === \"iana\") {\n      this.dt = dt;\n      z = dt.zone.name;\n    } else {\n      // Custom zones can have any offset / offsetName so we just manually\n      // apply the offset and substitute the zone as needed.\n      z = \"UTC\";\n      this.dt = dt.setZone(\"UTC\").plus({ minutes: dt.offset });\n      this.originalZone = dt.zone;\n    }\n\n    const intlOpts = { ...this.opts };\n    intlOpts.timeZone = intlOpts.timeZone || z;\n    this.dtf = getCachedDTF(intl, intlOpts);\n  }\n\n  format() {\n    if (this.originalZone) {\n      // If we have to substitute in the actual zone name, we have to use\n      // formatToParts so that the timezone can be replaced.\n      return this.formatToParts()\n        .map(({ value }) => value)\n        .join(\"\");\n    }\n    return this.dtf.format(this.dt.toJSDate());\n  }\n\n  formatToParts() {\n    const parts = this.dtf.formatToParts(this.dt.toJSDate());\n    if (this.originalZone) {\n      return parts.map((part) => {\n        if (part.type === \"timeZoneName\") {\n          const offsetName = this.originalZone.offsetName(this.dt.ts, {\n            locale: this.dt.locale,\n            format: this.opts.timeZoneName,\n          });\n          return {\n            ...part,\n            value: offsetName,\n          };\n        } else {\n          return part;\n        }\n      });\n    }\n    return parts;\n  }\n\n  resolvedOptions() {\n    return this.dtf.resolvedOptions();\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = { style: \"long\", ...opts };\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\nconst fallbackWeekSettings = {\n  firstDay: 1,\n  minimalDays: 4,\n  weekend: [6, 7],\n};\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(\n      opts.locale,\n      opts.numberingSystem,\n      opts.outputCalendar,\n      opts.weekSettings,\n      opts.defaultToEN\n    );\n  }\n\n  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale;\n    // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n    const localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale());\n    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;\n    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);\n  }\n\n  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.weekSettings = weekSettings;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode() {\n    const isActuallyEn = this.isEnglish();\n    const hasNoWeirdness =\n      (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n      (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n    return isActuallyEn && hasNoWeirdness ? \"en\" : \"intl\";\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        validateWeekSettings(alts.weekSettings) || this.weekSettings,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: true });\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone({ ...alts, defaultToEN: false });\n  }\n\n  months(length, format = false) {\n    return listStuff(this, length, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false) {\n    return listStuff(this, length, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems() {\n    return listStuff(\n      this,\n      undefined,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hourCycle: \"h12\" };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            (dt) => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length) {\n    return listStuff(this, length, English.eras, () => {\n      const intl = { era: length };\n\n      // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map((dt) =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find((m) => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  listFormatter(opts = {}) {\n    return getCachedLF(this.intl, opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\")\n    );\n  }\n\n  getWeekSettings() {\n    if (this.weekSettings) {\n      return this.weekSettings;\n    } else if (!hasLocaleWeekInfo()) {\n      return fallbackWeekSettings;\n    } else {\n      return getCachedWeekInfo(this.locale);\n    }\n  }\n\n  getStartOfWeek() {\n    return this.getWeekSettings().firstDay;\n  }\n\n  getMinDaysInFirstWeek() {\n    return this.getWeekSettings().minimalDays;\n  }\n\n  getWeekendDays() {\n    return this.getWeekSettings().weekend;\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}