{"ast":null,"code":"import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"https://api.weatherapi.com/v1\";\nconst getData = searchParams => {\n  const {\n    q\n  } = searchParams;\n  const url = new URL(`${BASE_URL}/forecast.json`);\n  const days = 14;\n  url.search = new URLSearchParams({\n    key: API_KEY,\n    q,\n    days\n  });\n  return fetch(url).then(res => res.json());\n};\nconst getFormattedData = async searchParams => {\n  let data;\n  try {\n    data = await getData(searchParams);\n    console.log(data);\n    return {\n      data\n    };\n  } catch (error) {\n    console.error(\"Error fetching or formatting data:\", error.message);\n    throw error;\n  }\n};\nconst CustomDate = (localtime_epoch, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n  const localDt = DateTime.fromSeconds(localtime_epoch);\n  const formattedDate = localDt.toFormat(format);\n  return formattedDate;\n};\n_c = CustomDate;\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nexport default getFormattedData;\nexport { round, getFormattedData, CustomDate };\nvar _c;\n$RefreshReg$(_c, \"CustomDate\");","map":{"version":3,"names":["DateTime","config","API_KEY","BASE_URL","getData","searchParams","q","url","URL","days","search","URLSearchParams","key","fetch","then","res","json","getFormattedData","data","console","log","error","message","CustomDate","localtime_epoch","format","localDt","fromSeconds","formattedDate","toFormat","_c","round","number","undefined","toFixed","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL =\"https://api.weatherapi.com/v1\";\n\n\nconst getData = (searchParams) => {\n    const {q} = searchParams;\n    const url = new URL(`${BASE_URL}/forecast.json`);\n    const days = 14;\n    url.search = new URLSearchParams({ key: API_KEY, q, days });\n    return fetch(url).then((res) => res.json());\n};\n\nconst getFormattedData = async (searchParams) => { \n    let data;\n    try {\n        data = await getData(searchParams);\n        console.log(data);\n        return {data};\n    } catch (error) {\n        console.error(\"Error fetching or formatting data:\", error.message);\n        throw error;\n    }\n};\n\nconst CustomDate = (localtime_epoch, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const localDt = DateTime.fromSeconds(localtime_epoch);\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n};\n\n\nexport default getFormattedData;\nexport { round, getFormattedData,CustomDate}\n\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;AAC9B,MAAMC,QAAQ,GAAE,+BAA+B;AAG/C,MAAMC,OAAO,GAAIC,YAAY,IAAK;EAC9B,MAAM;IAACC;EAAC,CAAC,GAAGD,YAAY;EACxB,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAEL,QAAS,gBAAe,CAAC;EAChD,MAAMM,IAAI,GAAG,EAAE;EACfF,GAAG,CAACG,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAEC,GAAG,EAAEV,OAAO;IAAEI,CAAC;IAAEG;EAAK,CAAC,CAAC;EAC3D,OAAOI,KAAK,CAACN,GAAG,CAAC,CAACO,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAOZ,YAAY,IAAK;EAC7C,IAAIa,IAAI;EACR,IAAI;IACAA,IAAI,GAAG,MAAMd,OAAO,CAACC,YAAY,CAAC;IAClCc,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAO;MAACA;IAAI,CAAC;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACC,OAAO,CAAC;IAClE,MAAMD,KAAK;EACf;AACJ,CAAC;AAED,MAAME,UAAU,GAAGA,CAACC,eAAe,EAAEC,MAAM,GAAG,2CAA2C,KAAK;EAC1F,MAAMC,OAAO,GAAG1B,QAAQ,CAAC2B,WAAW,CAACH,eAAe,CAAC;EACrD,MAAMI,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAACJ,MAAM,CAAC;EAC9C,OAAOG,aAAa;AACxB,CAAC;AAACE,EAAA,GAJIP,UAAU;AAMhB,MAAMQ,KAAK,GAAIC,MAAM,IAAK;EACtB,OAAOA,MAAM,KAAKC,SAAS,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;AACxD,CAAC;AAGD,eAAejB,gBAAgB;AAC/B,SAASc,KAAK,EAAEd,gBAAgB,EAACM,UAAU;AAAC,IAAAO,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}