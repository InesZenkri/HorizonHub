{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  const {\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    coord: {\n      lat,\n      lon\n    },\n    wind: {\n      speed\n    },\n    timezone,\n    weather,\n    name,\n    dt\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst getFormattedData = async searchParams => {\n  const currentFormattedData = await getData(\"weather\", searchParams).then(formatCurrentData);\n  console.log(currentFormattedData);\n  return {\n    currentFormattedData\n  };\n};\nconst formatToLT = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: ' hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nexport default getFormattedData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentData","data","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","timezone","weather","name","dt","details","icon","getFormattedData","currentFormattedData","console","log","formatToLT","secs","zone","format","fromSeconds","setZone","toFormat"],"sources":["/Users/zenkri/react-weather-app/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY =\"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url).then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    const{ \n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        sys:{ country, sunrise, sunset},\n        coord: {lat, lon},\n        wind:{speed},\n        timezone,\n        weather,\n        name,\n        dt,    \n    } = data ;\n\n    const { main: details, icon } = weather[0];\n\n    return {\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        details,\n        icon,\n        speed,\n    };\n};\n\n\n\nconst getFormattedData = async (searchParams) => { \n    const currentFormattedData = await getData\n    (\"weather\", searchParams).then(formatCurrentData);\n    console.log(currentFormattedData);\n    return {currentFormattedData};\n};\n\n\nconst formatToLT = (secs, zone, \n    format = \"cccc, dd LLL yyyy' | Local time: ' hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\n\n\n\nexport default getFormattedData;\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAE,yCAAyC;AAGzD,MAAMC,OAAO,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACxC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAO,CAAC,CAAC;EACpE,OAAOU,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChC,MAAK;IACDC,IAAI,EAAE;MAACC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAQ,CAAC;IACtDC,GAAG,EAAC;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAM,CAAC;IAC/BC,KAAK,EAAE;MAACC,GAAG;MAAEC;IAAG,CAAC;IACjBC,IAAI,EAAC;MAACC;IAAK,CAAC;IACZC,QAAQ;IACRC,OAAO;IACPC,IAAI;IACJC;EACJ,CAAC,GAAGnB,IAAI;EAER,MAAM;IAAEC,IAAI,EAAEmB,OAAO;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC;EAE1C,OAAO;IACHL,GAAG;IACHC,GAAG;IACHX,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRY,IAAI;IACJC,EAAE;IACFX,OAAO;IACPC,OAAO;IACPC,MAAM;IACNU,OAAO;IACPC,IAAI;IACJN;EACJ,CAAC;AACL,CAAC;AAID,MAAMO,gBAAgB,GAAG,MAAOjC,YAAY,IAAK;EAC7C,MAAMkC,oBAAoB,GAAG,MAAMpC,OAAO,CACzC,SAAS,EAAEE,YAAY,CAAC,CAACO,IAAI,CAACG,iBAAiB,CAAC;EACjDyB,OAAO,CAACC,GAAG,CAACF,oBAAoB,CAAC;EACjC,OAAO;IAACA;EAAoB,CAAC;AACjC,CAAC;AAGD,MAAMG,UAAU,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAC1BC,MAAM,GAAG,4CAA4C,KACpD7C,QAAQ,CAAC8C,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAI9D,eAAeP,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}