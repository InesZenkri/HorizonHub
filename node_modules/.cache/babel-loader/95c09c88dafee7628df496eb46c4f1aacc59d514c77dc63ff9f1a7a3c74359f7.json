{"ast":null,"code":"import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"https://api.weatherapi.com/v1\";\nconst getData = (infotype, searchParams) => {\n  const url = new URL(`${BASE_URL}/${infotype}.json`);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    key: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  console.log(data);\n  try {\n    const {\n      main: {\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity\n      },\n      sys: {\n        country,\n        sunrise,\n        sunset\n      },\n      coord: {\n        lat,\n        lon\n      },\n      wind: {\n        speed\n      },\n      timezone,\n      weather,\n      name,\n      dt\n    } = data;\n    const {\n      description,\n      icon,\n      main\n    } = weather[0];\n    return {\n      description,\n      lat,\n      lon,\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity,\n      name,\n      dt,\n      country,\n      sunrise,\n      sunset,\n      icon,\n      speed,\n      timezone,\n      main\n    };\n  } catch (error) {\n    console.error(\"Error formatting current data:\", error.message);\n    throw error;\n  }\n};\nconst getFormattedData = async searchParams => {\n  try {\n    const data = await getData(\"forecast\", searchParams);\n    const currentFormattedData = formatCurrentData(data);\n    return {\n      currentFormattedData\n    };\n  } catch (error) {\n    console.error(\"Error getting formatted data:\", error.message);\n    throw error;\n  }\n};\nconst formatTLT = (secs, zone, format = \"hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n  const dt = DateTime.fromSeconds(secs, {\n    zone: `UTC`\n  });\n  const localDt = dt.plus({\n    seconds: timezone\n  });\n  const formattedDate = localDt.toFormat(format);\n  return formattedDate;\n};\n_c = CustomDate;\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nconst br = async currentFormattedData => {\n  console.log(currentFormattedData);\n  const lat = currentFormattedData.lat;\n  const lon = currentFormattedData.lon;\n  const currentDate = new Date().toISOString();\n  const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n  const brightSkyData = await brightSkyResponse.json();\n  console.log(brightSkyData);\n  return brightSkyData.weather;\n};\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData, br };\nvar _c;\n$RefreshReg$(_c, \"CustomDate\");","map":{"version":3,"names":["DateTime","config","API_KEY","BASE_URL","getData","infotype","searchParams","url","URL","search","URLSearchParams","key","fetch","then","res","json","formatCurrentData","data","console","log","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","timezone","weather","name","dt","description","icon","error","message","getFormattedData","currentFormattedData","formatTLT","secs","zone","format","fromSeconds","setZone","toFormat","CustomDate","localDt","plus","seconds","formattedDate","_c","round","number","undefined","toFixed","br","currentDate","Date","toISOString","brightSkyResponse","brightSkyData","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"https://api.weatherapi.com/v1\";\n\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(`${BASE_URL}/${infotype}.json`);\n    url.search = new URLSearchParams({ ...searchParams, key: API_KEY })\n    return fetch(url).then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    console.log(data);\n    try {\n        const {\n            main: { temp, feels_like, temp_min, temp_max, humidity },\n            sys: { country, sunrise, sunset },\n            coord: { lat, lon },\n            wind: { speed },\n            timezone,\n            weather,\n            name,\n            dt,\n        } = data;\n    \n    const { description, icon, main } = weather[0];\n    \n    return {\n        description,\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        icon,\n        speed,\n        timezone,\n        main\n        };\n        } catch (error) {\n            console.error(\"Error formatting current data:\", error.message);\n            throw error; \n        }\n    };\n    \n\n    const getFormattedData = async (searchParams) => {\n        try {\n            const data = await getData(\"forecast\", searchParams);  \n            const currentFormattedData = formatCurrentData(data);\n            return { currentFormattedData };\n        } catch (error) {\n            console.error(\"Error getting formatted data:\", error.message);\n            throw error;\n        }\n    };\n\nconst formatTLT = (\n    secs,\n    zone,\n    format = \"hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const dt = DateTime.fromSeconds(secs, { zone: `UTC` });\n    const localDt = dt.plus({ seconds: timezone });\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n};\n\nconst br = async(currentFormattedData) => { \n    console.log(currentFormattedData);\n    const lat = currentFormattedData.lat;\n    const lon = currentFormattedData.lon;\n    const currentDate = new Date().toISOString();\n    const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n    const brightSkyData = await brightSkyResponse.json();\n    console.log(brightSkyData);\n    return(brightSkyData.weather);\n};\n\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData,br}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}