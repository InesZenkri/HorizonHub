{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst IconURL = iconId => `http://openweathermap.org/img/wn/${iconId}@2x.png`;\n_c = IconURL;\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  const {\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    coord: {\n      lat,\n      lon\n    },\n    wind: {\n      speed\n    },\n    timezone,\n    weather,\n    name,\n    dt\n  } = data;\n  const {\n    description,\n    icon\n  } = weather[0];\n  return {\n    description,\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    iconurl: IconURL(icon),\n    speed,\n    timezone\n  };\n};\nconst getFormattedData = async searchParams => {\n  const currentFormattedData = await getData(\"weather\", searchParams).then(formatCurrentData);\n  console.log(currentFormattedData);\n  return {\n    currentFormattedData\n  };\n};\nconst formatTLT = (secs, zone, format = \"hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst CustomDate = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n_c2 = CustomDate;\nexport default getFormattedData;\nexport { formatTLT, CustomDate };\nvar _c, _c2;\n$RefreshReg$(_c, \"IconURL\");\n$RefreshReg$(_c2, \"CustomDate\");","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","IconURL","iconId","_c","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentData","data","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","timezone","weather","name","dt","description","icon","iconurl","getFormattedData","currentFormattedData","console","log","formatTLT","secs","zone","format","fromSeconds","setZone","toFormat","CustomDate","_c2","$RefreshReg$"],"sources":["/Users/zenkri/react-weather-app/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY =\"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\nconst IconURL = (iconId) => `http://openweathermap.org/img/wn/${iconId}@2x.png`;\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url).then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    const{ \n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        sys:{ country, sunrise, sunset},\n        coord: {lat, lon},\n        wind:{speed},\n        timezone,\n        weather,\n        name,\n        dt,    \n    } = data ;\n\n    const { description, icon } = weather[0];\n    return {\n        description,\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        iconurl : IconURL(icon),\n        speed,\n        timezone,\n    };\n};\n\n\nconst getFormattedData = async (searchParams) => { \n    const currentFormattedData = await getData\n    (\"weather\", searchParams).then(formatCurrentData);\n    console.log(currentFormattedData);\n    return {currentFormattedData};\n};\n\nconst formatTLT = (\n    secs,\n    zone,\n    format = \"hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst CustomDate = ( secs,\nzone,\nformat = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nexport default getFormattedData;\nexport { formatTLT, CustomDate}\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAE,yCAAyC;AAEzD,MAAMC,OAAO,GAAIC,MAAM,IAAM,oCAAmCA,MAAO,SAAQ;AAACC,EAAA,GAA1EF,OAAO;AAEb,MAAMG,OAAO,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACxC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACR,QAAQ,GAAG,GAAG,GAAGK,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAEZ;EAAO,CAAC,CAAC;EACpE,OAAOa,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChC,MAAK;IACDC,IAAI,EAAE;MAACC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAQ,CAAC;IACtDC,GAAG,EAAC;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAM,CAAC;IAC/BC,KAAK,EAAE;MAACC,GAAG;MAAEC;IAAG,CAAC;IACjBC,IAAI,EAAC;MAACC;IAAK,CAAC;IACZC,QAAQ;IACRC,OAAO;IACPC,IAAI;IACJC;EACJ,CAAC,GAAGnB,IAAI;EAER,MAAM;IAAEoB,WAAW;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC;EACxC,OAAO;IACHG,WAAW;IACXR,GAAG;IACHC,GAAG;IACHX,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRY,IAAI;IACJC,EAAE;IACFX,OAAO;IACPC,OAAO;IACPC,MAAM;IACNY,OAAO,EAAGtC,OAAO,CAACqC,IAAI,CAAC;IACvBN,KAAK;IACLC;EACJ,CAAC;AACL,CAAC;AAGD,MAAMO,gBAAgB,GAAG,MAAOlC,YAAY,IAAK;EAC7C,MAAMmC,oBAAoB,GAAG,MAAMrC,OAAO,CACzC,SAAS,EAAEE,YAAY,CAAC,CAACO,IAAI,CAACG,iBAAiB,CAAC;EACjD0B,OAAO,CAACC,GAAG,CAACF,oBAAoB,CAAC;EACjC,OAAO;IAACA;EAAoB,CAAC;AACjC,CAAC;AAED,MAAMG,SAAS,GAAGA,CACdC,IAAI,EACJC,IAAI,EACJC,MAAM,GAAG,SAAS,KACjBjD,QAAQ,CAACkD,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAE9D,MAAMI,UAAU,GAAGA,CAAEN,IAAI,EACzBC,IAAI,EACJC,MAAM,GAAG,2CAA2C,KAC/CjD,QAAQ,CAACkD,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAACK,GAAA,GAHzDD,UAAU;AAKhB,eAAeX,gBAAgB;AAC/B,SAASI,SAAS,EAAEO,UAAU;AAAC,IAAAhD,EAAA,EAAAiD,GAAA;AAAAC,YAAA,CAAAlD,EAAA;AAAAkD,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}