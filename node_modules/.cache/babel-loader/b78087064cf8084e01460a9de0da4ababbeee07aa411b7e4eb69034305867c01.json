{"ast":null,"code":"import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"http://api.weatherapi.com/v1\";\nconst getData = searchParams => {\n  const {\n    q,\n    days\n  } = searchParams;\n  const url = new URL(`${BASE_URL}/forecast.json`);\n  url.search = new URLSearchParams({\n    key: API_KEY,\n    q,\n    days\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  try {\n    // Extract the relevant information from the WeatherAPI response\n    const {\n      current: {\n        temp_c,\n        feelslike_c,\n        humidity,\n        wind_kph\n      },\n      location: {\n        name,\n        country\n      },\n      astro: {\n        sunrise,\n        sunset\n      },\n      localtime_epoch,\n      condition: {\n        text,\n        icon\n      }\n    } = data;\n    return {\n      description: text,\n      temp: temp_c,\n      feels_like: feelslike_c,\n      humidity,\n      name,\n      country,\n      sunrise,\n      sunset,\n      icon,\n      speed: wind_kph,\n      timezone: data.location.tz_id\n    };\n  } catch (error) {\n    console.error(\"Error formatting current data:\", error.message);\n    throw error;\n  }\n};\nconst getFormattedData = async searchParams => {\n  let data;\n  try {\n    data = await getData(searchParams);\n    const currentFormattedData = formatCurrentData(data);\n    return {\n      currentFormattedData\n    };\n  } catch (error) {\n    console.error(\"Error fetching or formatting data:\", error.message);\n    throw error;\n  }\n};\nconst formatTLT = (secs, zone, format = \"hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n  const dt = DateTime.fromSeconds(secs, {\n    zone: `UTC`\n  });\n  const localDt = dt.plus({\n    seconds: timezone\n  });\n  const formattedDate = localDt.toFormat(format);\n  return formattedDate;\n};\n_c = CustomDate;\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nconst br = async currentFormattedData => {\n  console.log(currentFormattedData);\n  const lat = currentFormattedData.lat;\n  const lon = currentFormattedData.lon;\n  const currentDate = new Date().toISOString();\n  const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n  const brightSkyData = await brightSkyResponse.json();\n  console.log(brightSkyData);\n  return brightSkyData.weather;\n};\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData, br };\nvar _c;\n$RefreshReg$(_c, \"CustomDate\");","map":{"version":3,"names":["DateTime","config","API_KEY","BASE_URL","getData","searchParams","q","days","url","URL","search","URLSearchParams","key","fetch","then","res","json","formatCurrentData","data","current","temp_c","feelslike_c","humidity","wind_kph","location","name","country","astro","sunrise","sunset","localtime_epoch","condition","text","icon","description","temp","feels_like","speed","timezone","tz_id","error","console","message","getFormattedData","currentFormattedData","formatTLT","secs","zone","format","fromSeconds","setZone","toFormat","CustomDate","dt","localDt","plus","seconds","formattedDate","_c","round","number","undefined","toFixed","br","log","lat","lon","currentDate","Date","toISOString","brightSkyResponse","brightSkyData","weather","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL =\"http://api.weatherapi.com/v1\";\n\n\nconst getData = (searchParams) => {\n    const { q, days } = searchParams;\n    const url = new URL(`${BASE_URL}/forecast.json`);\n    url.search = new URLSearchParams({ key: API_KEY, q, days });\n    return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentData = (data) => { \n    try {\n        // Extract the relevant information from the WeatherAPI response\n        const {\n            current: { temp_c, feelslike_c, humidity, wind_kph },\n            location: { name, country },\n            astro: { sunrise, sunset },\n            localtime_epoch,\n            condition: { text, icon },\n        } = data;\n    \n        return {\n            description: text,\n            temp: temp_c,\n            feels_like: feelslike_c,\n            humidity,\n            name,\n            country,\n            sunrise,\n            sunset,\n            icon,\n            speed: wind_kph,\n            timezone: data.location.tz_id,\n        };\n    } catch (error) {\n        console.error(\"Error formatting current data:\", error.message);\n        throw error;\n    }\n};\n    \n\n\nconst getFormattedData = async (searchParams) => { \n    let data;\n    try {\n        data = await getData(searchParams);\n        const currentFormattedData = formatCurrentData(data);\n        return { currentFormattedData };\n    } catch (error) {\n        console.error(\"Error fetching or formatting data:\", error.message);\n        throw error;\n    }\n};\n\nconst formatTLT = (\n    secs,\n    zone,\n    format = \"hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const dt = DateTime.fromSeconds(secs, { zone: `UTC` });\n    const localDt = dt.plus({ seconds: timezone });\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n};\n\nconst br = async(currentFormattedData) => { \n    console.log(currentFormattedData);\n    const lat = currentFormattedData.lat;\n    const lon = currentFormattedData.lon;\n    const currentDate = new Date().toISOString();\n    const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n    const brightSkyData = await brightSkyResponse.json();\n    console.log(brightSkyData);\n    return(brightSkyData.weather);\n};\n\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData,br}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}