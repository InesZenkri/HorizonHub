{"ast":null,"code":"import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  try {\n    const {\n      main: {\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity\n      },\n      sys: {\n        country,\n        sunrise,\n        sunset\n      },\n      coord: {\n        lat,\n        lon\n      },\n      wind: {\n        speed\n      },\n      timezone,\n      weather,\n      name,\n      dt\n    } = data;\n    const {\n      description,\n      icon,\n      main\n    } = weather[0];\n    return {\n      description,\n      lat,\n      lon,\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity,\n      name,\n      dt,\n      country,\n      sunrise,\n      sunset,\n      icon,\n      speed,\n      timezone,\n      main\n    };\n  } catch (error) {\n    console.error(\"Error formatting current data:\", error.message);\n    throw error;\n  }\n};\nconst getFormattedData = async searchParams => {\n  let data;\n  data = await getData(\"weather\", searchParams);\n  const currentFormattedData = formatCurrentData(data);\n  return {\n    currentFormattedData\n  };\n};\nconst formatTLT = (secs, zone, format = \"hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n  const dt = DateTime.fromSeconds(secs, {\n    zone: `UTC`\n  });\n  const a = fetch('https://timeapi.io/api/Time/current/coordinate?latitude=52.5244&longitude=13.4105').then(response => {\n    if (!response.ok) {\n      throw new Error(`Failed to fetch data. Status: ${response.status}`);\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error fetching time data:', error.message);\n    throw error;\n  });\n  console.log(a);\n  const localDt = dt.plus({\n    seconds: timezone\n  });\n  const formattedDate = localDt.toFormat(format);\n  return formattedDate;\n};\n_c = CustomDate;\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nconst br = async currentFormattedData => {\n  console.log(currentFormattedData);\n  const lat = currentFormattedData.lat;\n  const lon = currentFormattedData.lon;\n  console.log(lat, lon);\n  const currentDate = new Date().toISOString();\n  const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n  const brightSkyData = await brightSkyResponse.json();\n  console.log(brightSkyData);\n  return brightSkyData.weather;\n};\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData, br };\nvar _c;\n$RefreshReg$(_c, \"CustomDate\");","map":{"version":3,"names":["DateTime","config","API_KEY","BASE_URL","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentData","data","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","timezone","weather","name","dt","description","icon","error","console","message","getFormattedData","currentFormattedData","formatTLT","secs","zone","format","fromSeconds","setZone","toFormat","CustomDate","a","response","ok","Error","status","catch","log","localDt","plus","seconds","formattedDate","_c","round","number","undefined","toFixed","br","currentDate","Date","toISOString","brightSkyResponse","brightSkyData","$RefreshReg$"],"sources":["/Users/zenkri/HorizonHub/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url).then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    try {\n        const {\n            main: { temp, feels_like, temp_min, temp_max, humidity },\n            sys: { country, sunrise, sunset },\n            coord: { lat, lon },\n            wind: { speed },\n            timezone,\n            weather,\n            name,\n            dt,\n        } = data;\n    \n    const { description, icon, main } = weather[0];\n    \n    return {\n        description,\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        icon,\n        speed,\n        timezone,\n        main\n        };\n        } catch (error) {\n            console.error(\"Error formatting current data:\", error.message);\n            throw error; \n        }\n    };\n    \n\n\nconst getFormattedData = async (searchParams) => { \n    let data;\n    data = await getData(\"weather\", searchParams);\n    const currentFormattedData = formatCurrentData(data);\n    return { currentFormattedData };\n  \n};\n\nconst formatTLT = (\n    secs,\n    zone,\n    format = \"hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const dt = DateTime.fromSeconds(secs, { zone: `UTC` });\n    const a = fetch('https://timeapi.io/api/Time/current/coordinate?latitude=52.5244&longitude=13.4105')    .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch data. Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .catch((error) => {\n        console.error('Error fetching time data:', error.message);\n        throw error;\n      });\n    console.log(a);\n    const localDt = dt.plus({ seconds: timezone });\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n};\n\nconst br = async(currentFormattedData) => { \n    console.log(currentFormattedData);\n    const lat = currentFormattedData.lat;\n    const lon = currentFormattedData.lon;\n    console.log(lat,lon);\n    const currentDate = new Date().toISOString();\n    const brightSkyResponse = await fetch(`https://api.brightsky.dev/weather?lat=${lat}&lon=${lon}&date=${currentDate}`);\n    const brightSkyData = await brightSkyResponse.json();\n    console.log(brightSkyData);\n    return(brightSkyData.weather);\n};\n\nexport default getFormattedData;\nexport { formatTLT, CustomDate, round, getFormattedData,br}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}