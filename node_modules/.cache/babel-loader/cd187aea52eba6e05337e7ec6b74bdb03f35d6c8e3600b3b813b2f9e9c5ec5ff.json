{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatData = data => {\n  let {\n    eday,\n    ehour,\n    timezone\n  } = data;\n  console.log(\"Data received:\", data);\n  eday = eday.slice(1, 6).map(d => {\n    return {\n      titel: formatToLT(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  ehour = ehour.slice(1, 6).map(d => {\n    return {\n      titel: formatToLT(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    eday,\n    ehour,\n    timezone\n  };\n};\nconst getFormattedData = async searchParams => {\n  const currentFormattedData = await getData(\"weather\", searchParams).then(formatCurrentData);\n  console.log(currentFormattedData);\n  const {\n    lat,\n    lon\n  } = currentFormattedData;\n  const forecastData = await getData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units\n  }).then(formatData);\n  return {\n    ...currentFormattedData,\n    ...forecastData\n  };\n};\nconst formatToLT = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: ' hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nexport default getFormattedData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatData","data","eday","ehour","timezone","console","log","slice","map","d","titel","formatToLT","dt","temp","day","icon","weather","getFormattedData","currentFormattedData","formatCurrentData","lat","lon","forecastData","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat"],"sources":["/Users/zenkri/react-weather-app/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY =\"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url).then((res) => res.json())\n};\n\n\nconst formatData = (data) => {\n    let {eday, ehour, timezone} = data ;\n    console.log(\"Data received:\", data);\n\n    eday = eday.slice(1, 6).map((d) => { \n        return {\n            titel: formatToLT(d.dt, timezone, \"ccc\"),\n            temp: d.temp.day,\n            icon: d.weather[0].icon\n        };\n    });\n    ehour = ehour.slice(1, 6).map((d) => { \n        return {\n            titel: formatToLT(d.dt, timezone, \"hh:mm a\"),\n            temp: d.temp,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    return { eday, ehour, timezone};\n};\n\nconst getFormattedData = async (searchParams) => { \n    const currentFormattedData = await getData\n    (\"weather\", searchParams).then(formatCurrentData);\n    console.log(currentFormattedData);\n\n    const {lat, lon} = currentFormattedData;\n\n    const forecastData = await getData(\"onecall\", {\n        lat, lon, exclude:\"current,minutely,alerts\", \n        units: searchParams.units,\n    }).then(formatData);\n    return { ...currentFormattedData, ...forecastData };\n};\n\n\nconst formatToLT = (secs, zone, \n    format = \"cccc, dd LLL yyyy' | Local time: ' hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\n\n\n\nexport default getFormattedData;\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAE,yCAAyC;AAGzD,MAAMC,OAAO,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACxC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAO,CAAC,CAAC;EACpE,OAAOU,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAGD,MAAMC,UAAU,GAAIC,IAAI,IAAK;EACzB,IAAI;IAACC,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGH,IAAI;EAClCI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,IAAI,CAAC;EAEnCC,IAAI,GAAGA,IAAI,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK;IAC/B,OAAO;MACHC,KAAK,EAAEC,UAAU,CAACF,CAAC,CAACG,EAAE,EAAER,QAAQ,EAAE,KAAK,CAAC;MACxCS,IAAI,EAAEJ,CAAC,CAACI,IAAI,CAACC,GAAG;MAChBC,IAAI,EAAEN,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,CAACD;IACvB,CAAC;EACL,CAAC,CAAC;EACFZ,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK;IACjC,OAAO;MACHC,KAAK,EAAEC,UAAU,CAACF,CAAC,CAACG,EAAE,EAAER,QAAQ,EAAE,SAAS,CAAC;MAC5CS,IAAI,EAAEJ,CAAC,CAACI,IAAI;MACZE,IAAI,EAAEN,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,CAACD;IACvB,CAAC;EACL,CAAC,CAAC;EAEF,OAAO;IAAEb,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC;AACnC,CAAC;AAED,MAAMa,gBAAgB,GAAG,MAAO3B,YAAY,IAAK;EAC7C,MAAM4B,oBAAoB,GAAG,MAAM9B,OAAO,CACzC,SAAS,EAAEE,YAAY,CAAC,CAACO,IAAI,CAACsB,iBAAiB,CAAC;EACjDd,OAAO,CAACC,GAAG,CAACY,oBAAoB,CAAC;EAEjC,MAAM;IAACE,GAAG;IAAEC;EAAG,CAAC,GAAGH,oBAAoB;EAEvC,MAAMI,YAAY,GAAG,MAAMlC,OAAO,CAAC,SAAS,EAAE;IAC1CgC,GAAG;IAAEC,GAAG;IAAEE,OAAO,EAAC,yBAAyB;IAC3CC,KAAK,EAAElC,YAAY,CAACkC;EACxB,CAAC,CAAC,CAAC3B,IAAI,CAACG,UAAU,CAAC;EACnB,OAAO;IAAE,GAAGkB,oBAAoB;IAAE,GAAGI;EAAa,CAAC;AACvD,CAAC;AAGD,MAAMX,UAAU,GAAGA,CAACc,IAAI,EAAEC,IAAI,EAC1BC,MAAM,GAAG,4CAA4C,KACpD1C,QAAQ,CAAC2C,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAI9D,eAAeV,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}