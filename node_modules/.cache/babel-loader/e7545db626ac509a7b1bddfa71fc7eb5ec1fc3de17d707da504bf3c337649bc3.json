{"ast":null,"code":"import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL = \"http://api.weatherapi.com/v1\";\nconst getData = searchParams => {\n  const {\n    q\n  } = searchParams;\n  const url = new URL(`${BASE_URL}/forecast.json`);\n  const days = 14;\n  url.search = new URLSearchParams({\n    key: API_KEY,\n    q,\n    days\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  console.log(data);\n  try {\n    // Extract the relevant information from the WeatherAPI response\n    const {\n      current: {\n        temp_c,\n        feelslike_c,\n        humidity,\n        wind_kph\n      },\n      location: {\n        name,\n        country\n      },\n      astro: {\n        sunrise,\n        sunset\n      },\n      localtime_epoch,\n      condition: {\n        text,\n        icon\n      }\n    } = data;\n    return {\n      description: text,\n      temp: temp_c,\n      feels_like: feelslike_c,\n      humidity,\n      name,\n      country,\n      sunrise,\n      sunset,\n      icon,\n      speed: wind_kph,\n      timezone: data.location.tz_id\n    };\n  } catch (error) {\n    console.error(\"Error formatting current data:\", error.message);\n    throw error;\n  }\n};\nconst getFormattedData = async searchParams => {\n  let data;\n  try {\n    data = await getData(searchParams);\n    const currentFormattedData = formatCurrentData(data);\n    return {\n      currentFormattedData\n    };\n  } catch (error) {\n    console.error(\"Error fetching or formatting data:\", error.message);\n    throw error;\n  }\n};\n\n/*const CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};*/\n\nconst round = number => {\n  return number !== undefined ? number.toFixed(0) : '';\n};\nexport default getFormattedData;\nexport { round, getFormattedData };","map":{"version":3,"names":["DateTime","config","API_KEY","BASE_URL","getData","searchParams","q","url","URL","days","search","URLSearchParams","key","fetch","then","res","json","formatCurrentData","data","console","log","current","temp_c","feelslike_c","humidity","wind_kph","location","name","country","astro","sunrise","sunset","localtime_epoch","condition","text","icon","description","temp","feels_like","speed","timezone","tz_id","error","message","getFormattedData","currentFormattedData","round","number","undefined","toFixed"],"sources":["/Users/zenkri/HorizonHub/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from 'luxon';\nimport config from \"./config\";\nconst API_KEY = config.API_KEY;\nconst BASE_URL =\"http://api.weatherapi.com/v1\";\n\n\nconst getData = (searchParams) => {\n    const {q} = searchParams;\n    const url = new URL(`${BASE_URL}/forecast.json`);\n    const days = 14;\n    url.search = new URLSearchParams({ key: API_KEY, q, days });\n    return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentData = (data) => { \n    console.log(data);\n    try {\n        // Extract the relevant information from the WeatherAPI response\n        const {\n            current: { temp_c, feelslike_c, humidity, wind_kph },\n            location: { name, country },\n            astro: { sunrise, sunset },\n            localtime_epoch,\n            condition: { text, icon },\n        } = data;\n    \n        return {\n            description: text,\n            temp: temp_c,\n            feels_like: feelslike_c,\n            humidity,\n            name,\n            country,\n            sunrise,\n            sunset,\n            icon,\n            speed: wind_kph,\n            timezone: data.location.tz_id,\n        };\n    } catch (error) {\n        console.error(\"Error formatting current data:\", error.message);\n        throw error;\n    }\n};\n    \n\n\nconst getFormattedData = async (searchParams) => { \n    let data;\n    try {\n        data = await getData(searchParams);\n        const currentFormattedData = formatCurrentData(data);\n        return { currentFormattedData };\n    } catch (error) {\n        console.error(\"Error fetching or formatting data:\", error.message);\n        throw error;\n    }\n};\n\n/*const CustomDate = (secs, timezone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => {\n    const formattedDate = localDt.toFormat(format);\n    return formattedDate;\n};*/\n\nconst round = (number) => {\n    return number !== undefined ? number.toFixed(0) : '';\n};\n\n\nexport default getFormattedData;\nexport { round, getFormattedData}\n\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,UAAU;AAC7B,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;AAC9B,MAAMC,QAAQ,GAAE,8BAA8B;AAG9C,MAAMC,OAAO,GAAIC,YAAY,IAAK;EAC9B,MAAM;IAACC;EAAC,CAAC,GAAGD,YAAY;EACxB,MAAME,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAEL,QAAS,gBAAe,CAAC;EAChD,MAAMM,IAAI,GAAG,EAAE;EACfF,GAAG,CAACG,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAEC,GAAG,EAAEV,OAAO;IAAEI,CAAC;IAAEG;EAAK,CAAC,CAAC;EAC3D,OAAOI,KAAK,CAACN,GAAG,CAAC,CAACO,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,IAAI;IACA;IACA,MAAM;MACFG,OAAO,EAAE;QAAEC,MAAM;QAAEC,WAAW;QAAEC,QAAQ;QAAEC;MAAS,CAAC;MACpDC,QAAQ,EAAE;QAAEC,IAAI;QAAEC;MAAQ,CAAC;MAC3BC,KAAK,EAAE;QAAEC,OAAO;QAAEC;MAAO,CAAC;MAC1BC,eAAe;MACfC,SAAS,EAAE;QAAEC,IAAI;QAAEC;MAAK;IAC5B,CAAC,GAAGjB,IAAI;IAER,OAAO;MACHkB,WAAW,EAAEF,IAAI;MACjBG,IAAI,EAAEf,MAAM;MACZgB,UAAU,EAAEf,WAAW;MACvBC,QAAQ;MACRG,IAAI;MACJC,OAAO;MACPE,OAAO;MACPC,MAAM;MACNI,IAAI;MACJI,KAAK,EAAEd,QAAQ;MACfe,QAAQ,EAAEtB,IAAI,CAACQ,QAAQ,CAACe;IAC5B,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZvB,OAAO,CAACuB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC9D,MAAMD,KAAK;EACf;AACJ,CAAC;AAID,MAAME,gBAAgB,GAAG,MAAOvC,YAAY,IAAK;EAC7C,IAAIa,IAAI;EACR,IAAI;IACAA,IAAI,GAAG,MAAMd,OAAO,CAACC,YAAY,CAAC;IAClC,MAAMwC,oBAAoB,GAAG5B,iBAAiB,CAACC,IAAI,CAAC;IACpD,OAAO;MAAE2B;IAAqB,CAAC;EACnC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZvB,OAAO,CAACuB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACC,OAAO,CAAC;IAClE,MAAMD,KAAK;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAIC,MAAM,IAAK;EACtB,OAAOA,MAAM,KAAKC,SAAS,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;AACxD,CAAC;AAGD,eAAeL,gBAAgB;AAC/B,SAASE,KAAK,EAAEF,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}