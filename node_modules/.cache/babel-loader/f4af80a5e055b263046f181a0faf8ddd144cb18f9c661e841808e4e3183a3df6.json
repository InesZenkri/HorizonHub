{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getData = (infotype, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infotype);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentData = data => {\n  const {\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    coord: {\n      lat,\n      lon\n    },\n    wind: {\n      speed\n    },\n    weather,\n    name,\n    dt\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatData = data => {\n  let {\n    day,\n    hour,\n    timezone\n  } = data;\n  day = day.slice(1, 6).map(d => {\n    return {\n      titel: formatToLT(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather\n    };\n  });\n};\nconst getFormattedData = async searchParams => {\n  const currentFormattedData = await getData('weather', searchParams).then(formatCurrentData);\n  const {\n    lat,\n    lon\n  } = currentFormattedData;\n  const forecastData = await getData('onecall', {\n    lat,\n    lon,\n    exclude: 'current,minutely,alerts',\n    units: searchParams.units\n  }).then(formatData);\n  return currentFormattedData;\n};\nconst formatToLT = (secs, zone, format = \"cccc, dd mm yyyy '| Local time: ' hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nexport default getFormattedData;","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getData","infotype","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentData","data","main","temp","feels_like","temp_min","temp_max","humidity","sys","country","sunrise","sunset","coord","lat","lon","wind","speed","weather","name","dt","details","icon","formatData","day","hour","timezone","slice","map","d","titel","formatToLT","getFormattedData","currentFormattedData","forecastData","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat"],"sources":["/Users/zenkri/react-weather-app/src/makeitwork/weather.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY =\"558b6b9ac644331a1081da7d76b84230\";\nconst BASE_URL =\"https://api.openweathermap.org/data/2.5\";\n\n\nconst getData = (infotype, searchParams) => {\n    const url = new URL(BASE_URL + \"/\" + infotype);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY})\n    return fetch(url)\n    .then((res) => res.json())\n};\n\nconst formatCurrentData = (data) => { \n    const{ \n        main: {temp, feels_like, temp_min, temp_max, humidity},\n        sys:{ country, sunrise, sunset},\n        coord: {lat, lon},\n        wind:{speed},\n        weather,\n        name,\n        dt,    \n    } = data ;\n    const { main: details, icon } = weather[0];\n    return {\n        lat,\n        lon,\n        temp,\n        feels_like,\n        temp_min,\n        temp_max,\n        humidity,\n        name,\n        dt,\n        country,\n        sunrise,\n        sunset,\n        details,\n        icon,\n        speed,\n    };\n};\n\nconst formatData = (data) => {\n    let {day, hour, timezone} = data ;\n    day = day.slice(1,6).map(d => { \n        return {\n            titel: formatToLT(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather\n        }\n    })\n}\nconst getFormattedData = async (searchParams) => { \n    const currentFormattedData = await getData\n    ('weather', searchParams).then(formatCurrentData);\n\n    const {lat, lon} = currentFormattedData \n    const forecastData = await getData('onecall', {\n        lat, lon, exclude:'current,minutely,alerts', units: searchParams.units\n    }).then(formatData)\n\n    return currentFormattedData\n};\n\nconst formatToLT = (secs, zone, format =\"cccc, dd mm yyyy '| Local time: ' hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\n\nexport default getFormattedData"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAE,kCAAkC;AACjD,MAAMC,QAAQ,GAAE,yCAAyC;AAGzD,MAAMC,OAAO,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACxC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAO,CAAC,CAAC;EACpE,OAAOU,KAAK,CAACL,GAAG,CAAC,CAChBM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC9B,CAAC;AAED,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChC,MAAK;IACDC,IAAI,EAAE;MAACC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAQ,CAAC;IACtDC,GAAG,EAAC;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAM,CAAC;IAC/BC,KAAK,EAAE;MAACC,GAAG;MAAEC;IAAG,CAAC;IACjBC,IAAI,EAAC;MAACC;IAAK,CAAC;IACZC,OAAO;IACPC,IAAI;IACJC;EACJ,CAAC,GAAGlB,IAAI;EACR,MAAM;IAAEC,IAAI,EAAEkB,OAAO;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC;EAC1C,OAAO;IACHJ,GAAG;IACHC,GAAG;IACHX,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRW,IAAI;IACJC,EAAE;IACFV,OAAO;IACPC,OAAO;IACPC,MAAM;IACNS,OAAO;IACPC,IAAI;IACJL;EACJ,CAAC;AACL,CAAC;AAED,MAAMM,UAAU,GAAIrB,IAAI,IAAK;EACzB,IAAI;IAACsB,GAAG;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAGxB,IAAI;EAChCsB,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAI;IAC1B,OAAO;MACHC,KAAK,EAAEC,UAAU,CAACF,CAAC,CAACT,EAAE,EAAEM,QAAQ,EAAE,KAAK,CAAC;MACxCtB,IAAI,EAAEyB,CAAC,CAACzB,IAAI,CAACoB,GAAG;MAChBF,IAAI,EAAEO,CAAC,CAACX;IACZ,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AACD,MAAMc,gBAAgB,GAAG,MAAOzC,YAAY,IAAK;EAC7C,MAAM0C,oBAAoB,GAAG,MAAM5C,OAAO,CACzC,SAAS,EAAEE,YAAY,CAAC,CAACO,IAAI,CAACG,iBAAiB,CAAC;EAEjD,MAAM;IAACa,GAAG;IAAEC;EAAG,CAAC,GAAGkB,oBAAoB;EACvC,MAAMC,YAAY,GAAG,MAAM7C,OAAO,CAAC,SAAS,EAAE;IAC1CyB,GAAG;IAAEC,GAAG;IAAEoB,OAAO,EAAC,yBAAyB;IAAEC,KAAK,EAAE7C,YAAY,CAAC6C;EACrE,CAAC,CAAC,CAACtC,IAAI,CAACyB,UAAU,CAAC;EAEnB,OAAOU,oBAAoB;AAC/B,CAAC;AAED,MAAMF,UAAU,GAAGA,CAACM,IAAI,EAAEC,IAAI,EAAEC,MAAM,GAAE,2CAA2C,KAC9ErD,QAAQ,CAACsD,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAE9D,eAAeP,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}